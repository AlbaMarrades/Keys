import { NgModule } from '@angular/core';
import { FakeMissingTranslationHandler, TranslateDefaultParser, TranslateFakeCompiler, TranslateModule, TranslateService } from '@ngx-translate/core';
import { TestTranslateLoader } from './test-translate-loader.service';
import * as i0 from "@angular/core";
/**
 * The TranslateTestingModule provides the {TranslateModule} as well as a
 * {TranslateService} configured to return translations specific for the
 * test environment.
 *
 * @export
 */
export class TranslateTestingModule {
    constructor() {
        this._translations = {};
    }
    static withTranslations(languageOrTranslations, translations) {
        const translateTestingModule = new TranslateTestingModule();
        if (typeof languageOrTranslations === 'string') {
            return translateTestingModule.withTranslations(languageOrTranslations, translations);
        }
        return translateTestingModule.withTranslations(languageOrTranslations);
    }
    get ngModule() {
        return TranslateTestingModule;
    }
    get providers() {
        const translateService = new TranslateService(null, new TestTranslateLoader(this._translations), this._compiler || new TranslateFakeCompiler(), new TranslateDefaultParser(), new FakeMissingTranslationHandler(), true, true, false, this._defaultLanguage);
        return [
            {
                provide: TranslateService,
                useValue: translateService
            }
        ];
    }
    withTranslations(languageOrTranslations, translations) {
        if (typeof languageOrTranslations === 'string' && translations) {
            this.addTranslations(languageOrTranslations, translations);
            this._defaultLanguage = languageOrTranslations;
        }
        else if (languageOrTranslations) {
            Object.keys(languageOrTranslations).forEach(language => this.addTranslations(language, languageOrTranslations[language]));
        }
        return this;
    }
    /**
     * Updates the {TranslationTestingModule} to provide a {TranslateService} that will
     * use the provided {TranslateCompiler} to translate the test translations.
     *
     * @example
     *
     * TranslateTestingModule.withTranslations('en', {people: '{gender, select, male{He is} female{She is} other{They are}} {how})'})
     *   .withCompiler(new TranslateMessageFormatCompiler());
     *
     * @param compiler the compiler to use to compile the test translations.
     * @returns the instance that can be used to chain additional configuration.
     * @memberof TranslateTestingModule
     */
    withCompiler(compiler) {
        this._compiler = compiler;
        return this;
    }
    /**
     * Updates the {TranslateTestingModule} to use the provided language as the default language.
     * By default, the default language will be set to the first language provided.
     *
     * @example
     *
     * TranslateTestingModule.withTranslations('es', SPANISH_TRANSLATIONS)
     *   .withTranslations('en', ENGLISH_TRANSLATIONS)
     *   .withDefaultLanguage('en');
     *
     * @param language the new default language for translations.
     * @returns the instance that can be used to chain additional configuration.
     * @memberof TranslateTestingModule
     */
    withDefaultLanguage(language) {
        this._defaultLanguage = language || this._defaultLanguage;
        return this;
    }
    addTranslations(language, translations) {
        if (!this._defaultLanguage) {
            this._defaultLanguage = language;
        }
        if (this._translations[language]) {
            this._translations[language] = {
                ...this._translations[language],
                ...translations
            };
        }
        else {
            this._translations[language] = translations;
        }
    }
}
/** @nocollapse */ /** @nocollapse */ TranslateTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: TranslateTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ /** @nocollapse */ TranslateTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: TranslateTestingModule, imports: [TranslateModule], exports: [TranslateModule] });
/** @nocollapse */ /** @nocollapse */ TranslateTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: TranslateTestingModule, imports: [[TranslateModule], TranslateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: TranslateTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TranslateModule],
                    exports: [TranslateModule]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,